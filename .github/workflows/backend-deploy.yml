name: Backend Deploy To Home Server
on:
  push:
    branches:
      - main
    paths:
      - 'back/**'
  pull_request:
    types: [opened, closed]
    paths:
      - 'back/**'
jobs:
  Check_Path:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Check for backend changes
        id: check
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin main
            CHANGED_FILES=$(git diff --name-only origin/main..HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD^1 HEAD)
          fi
          echo "Changed files:"
          echo "$CHANGED_FILES"
          if echo "$CHANGED_FILES" | grep -q "^back/"; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  Deploy:
    needs: Check_Path
    if: |
      needs.Check_Path.outputs.should_deploy == 'true' && 
      (github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: SSH로 홈서버 접속하기
        uses: appleboy/ssh-action@v1.0.3
        env:
          APPLICATION_PROPERTIES: ${{ secrets.APPLICATION_PROPERTIES }}
        with:
          host: ${{ secrets.HOME_SERVER_HOST }}
          username: ${{ secrets.HOME_SERVER_USERNAME }}
          password: ${{ secrets.HOME_SERVER_PASSWORD }}
          port: ${{ secrets.HOME_SERVER_PORT }}
          envs: APPLICATION_PROPERTIES
          script_stop: true
          script: |
            # 프로젝트 디렉토리로 이동
            cd /home/ubuntu/moya/back/moya
            
            # 로컬 변경사항 초기화
            git reset --hard
            git clean -fd
            
            # git pull
            git remote set-url origin git@github.com:sungwon2598/moya.git
            git pull origin main
            
            # application.yml 생성
            echo "$APPLICATION_PROPERTIES" > src/main/resources/application.yml
            
            # Dockerfile 생성
            cat > Dockerfile << 'EOL'
            FROM eclipse-temurin:21-jdk AS builder
            WORKDIR /app
            COPY . .
            RUN chmod +x ./gradlew
            RUN ./gradlew clean build -x test

            FROM eclipse-temurin:21-jre
            WORKDIR /app
            COPY --from=builder /app/build/libs/*.jar app.jar
            ENV JAVA_OPTS="-Xms128m -Xmx256m -XX:+UseSerialGC -XX:MaxHeapFreeRatio=70 -XX:MinHeapFreeRatio=40 -XX:+UseStringDeduplication -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/app/heapdump.hprof"
            EXPOSE 8080
            ENTRYPOINT ["sh", "-c", "java \$JAVA_OPTS -jar app.jar"]
            EOL
            
            # Docker Compose로 스프링부트 앱만 재빌드 및 재시작
            cd /home/ubuntu/moya-docker
            docker-compose up -d --build springboot-app

  Notify:
    needs: [Check_Path, Deploy]
    if: always() && needs.Check_Path.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            MESSAGE="백엔드 코드가 main 브랜치에 푸시되었습니다.\n\n커밋 메시지: ${{ github.event.head_commit.message }}"
          elif [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.action }}" = "opened" ]; then
            MESSAGE="백엔드 코드의 새로운 PR이 생성되었습니다.\n\nPR 번호: #${{ github.event.pull_request.number }}\n\nPR 제목: ${{ github.event.pull_request.title }}"
          elif [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.action }}" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            MESSAGE="백엔드 코드 PR이 main 브랜치에 병합되었습니다.\n\nPR 번호: #${{ github.event.pull_request.number }}\n\nPR 제목: ${{ github.event.pull_request.title }}"
          else
            MESSAGE="백엔드 배포 워크플로우가 실행되었습니다."
          fi
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$MESSAGE\"}" $SLACK_WEBHOOK_URL
