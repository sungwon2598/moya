name: Backend Deploy To EC2 Server (Session Manager)
on:
  push:
    branches:
      - main
    paths:
      - 'back/**'
  pull_request:
    types: [opened, closed]
    paths:
      - 'back/**'

# OIDC 토큰을 위한 권한 설정
permissions:
  id-token: write
  contents: read

jobs:
  Check_Path:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Check for backend changes
        id: check
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin main
            CHANGED_FILES=$(git diff --name-only origin/main..HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD^1 HEAD)
          fi
          echo "Changed files:"
          echo "$CHANGED_FILES"
          if echo "$CHANGED_FILES" | grep -q "^back/"; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  Deploy:
    needs: Check_Path
    if: |
      needs.Check_Path.outputs.should_deploy == 'true' && 
      (github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # OIDC로 AWS 인증 (GitHub Secrets 불필요!)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::179227986066:role/GitHubActionsRole
          aws-region: ap-northeast-2

      # Parameter Store에서 설정 정보 가져오기
      - name: Get parameters from AWS Parameter Store
        run: |
          echo "INSTANCE_ID=$(aws ssm get-parameter --name "/moya/backend/server/instance-id" --query "Parameter.Value" --output text)" >> $GITHUB_ENV
          
          APPLICATION_PROPERTIES=$(aws ssm get-parameter --name "/moya/backend/application-yml" --with-decryption --query "Parameter.Value" --output text)
          
          # 환경 변수로 설정 (멀티라인 텍스트)
          echo "APPLICATION_PROPERTIES<<EOF" >> $GITHUB_ENV
          echo "$APPLICATION_PROPERTIES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Session Manager로 배포 명령 실행
      - name: Deploy via Session Manager
        run: |
          # APPLICATION_PROPERTIES를 파일로 저장
          echo "$APPLICATION_PROPERTIES" > application.yml
          
          # Session Manager로 명령 실행
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cd /home/ubuntu/moya/back/moya",
              "git reset --hard",
              "git clean -fd -e logs/",
              "git remote set-url origin https://github.com/sungwon2598/moya.git",
              "git pull origin main",
              "git log --oneline -3",
              "pkill -f \"java.*moya.*jar\" || true",
              "sleep 3",
              "./gradlew clean build -x test",
              "nohup java -Xmx256m -jar build/libs/moya-0.0.1-SNAPSHOT.jar > app.log 2>&1 &",
              "sleep 5",
              "if pgrep -f \"java.*moya.*jar\" > /dev/null; then echo \"Application started successfully\"; else echo \"Application failed to start\" && exit 1; fi"
            ]' \
            --query "Command.CommandId" --output text)
          
          echo "Command ID: $COMMAND_ID"
          
          # 명령 실행 완료 대기 (최대 10분)
          echo "Waiting for command execution to complete..."
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --cli-read-timeout 600 \
            --cli-connect-timeout 60
          
          # 실행 결과 확인
          echo "Command execution result:"
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query 'Status'
          
          # 성공 여부 확인
          STATUS=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query 'Status' --output text)
          
          if [ "$STATUS" != "Success" ]; then
            echo "Deployment failed with status: $STATUS"
            # 실패 시 상세 로그 출력
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --query 'StandardErrorContent' --output text
            exit 1
          fi
          
          echo "Deployment completed successfully!"